package useCase.eventManager;

import entities.Attendee;
import entities.Event;
import entities.User;
import gateways.IGateway;
import useCase.accountManager.AccountManager;

import java.util.ArrayList;

/**
 * A UserEventManager for an attendee.
 */
public class AttendeeEventManager extends UserEventManager {
    /**
     * Constructs a new UserEventManager with a Speaker.
     *
     * @param user An instance of Attendee.
     */
    public AttendeeEventManager(User user) {
        super(user);
    }

    /**
     * Signs up an event for the user.
     *
     * @param eventGateway An EventGateway.
     * @param userGateway  A UserGateway.
     * @param eb           An EventBoard.
     * @param acm          An AccountManager.
     * @param eventId      Int id of the event.
     * @return True if the sign up is successful; False if not.
     */
    public boolean signUpEvent(IGateway eventGateway, IGateway userGateway, EventBoard eb, AccountManager acm, int eventId) {
        if (!eb.isValidId(eventId)) {
            return false;
        }
        Event event = eb.getEventById(eventId);
        if (event.addAttendee(user.getId())) {
            ((Attendee) user).addEvent(event.getId());
            eb.save(eventGateway);
            acm.save(userGateway);
            return true;
        }
        return false;
    }

    /**
     * Cancels user's position in an event.
     *
     * @param eventGateway An EventGateway.
     * @param userGateway  A UserGateway.
     * @param eb           An EventBoard.
     * @param acm          An AccountManager.
     * @param eventId      Int id of the event.
     * @return True if cancelling is successful; false if not.
     */
    public boolean cancelEvent(IGateway eventGateway, IGateway userGateway, EventBoard eb, AccountManager acm, int eventId) {
        if (!getMyEventList().contains(eventId)) {
            return false;
        }
        if (eb.getEventById(eventId).removeAttendee(user.getId())) {
            ((Attendee) user).removeEvent(eventId);
            eb.save(eventGateway);
            acm.save(userGateway);
            return true;
        }
        return false;
    }


    public ArrayList<Integer> getMyEventList() {
        return ((Attendee) user).getEventList();
    }

    /**
     * Get An ArrayList of information of events.
     *
     * @param eb An instance of EventBoard.
     * @return An ArrayList of information generated by EventBoard.getInfo().
     * @see EventBoard
     */
    public ArrayList<ArrayList<String>> getMyEventsInfoList(EventBoard eb) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();
        ArrayList<Integer> myEventList = getMyEventList();
        for (int event : myEventList) {
            result.add(eb.getInfoList(event));
        }
        return result;
    }

    public ArrayList<ArrayList<String>> getMySchedule(EventBoard eb) {
        ArrayList<Event> eventList = eb.getAllEventsById(getMyEventList());
        return generateScheduleGenerator().scheduleInfo(eventList);

    }


}
