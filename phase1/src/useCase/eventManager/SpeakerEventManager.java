package useCase.eventManager;

import entities.Event;
import entities.Speaker;
import entities.User;
import useCase.accountManager.AccountManager;

import java.util.ArrayList;

/**
 * A UserEventManager for a speaker.
 */
public class SpeakerEventManager extends UserEventManager {
    /**
     * Constructs a new UserEventManager with a Speaker.
     *
     * @param user An instance of Speaker.
     */
    public SpeakerEventManager(User user) {
        super(user);
    }

    /**
     * Return an ArrayList of Integer of ids of all attendees in this speaker's talks.
     *
     * @param myEvents An ArrayList of Event the speaker holds.
     * @return An ArrayList of Integer of attendee ids in allEvents.
     */
    public ArrayList<Integer> getAttendees(ArrayList<Event> myEvents) {
        ArrayList<Integer> result = new ArrayList<>();
        for (Event event : myEvents) {
            //get all attendees of the event
            ArrayList<Integer> lst = event.getAttendees();
            //check whether each attendees' id is in result, put the id in result if it is not in the result.
            for (int id : lst) {
                if (!result.contains(id)) {
                    result.add(id);
                }
            }
        }
        return result;
    }

    /**
     * Return an ArrayList of Integer ids of the attendees of an event.
     *
     * @param event An Event the speaker holds.
     * @return An ArrayList of Integer attendee ids.
     */
    public ArrayList<Integer> getAttendees(Event event) {
        return event.getAttendees();
    }

    /**
     * Return an ArrayList of Integer ids of the events the speaker holds.
     *
     * @return An ArrayList of Integer event ids.
     */
    public ArrayList<Integer> getMyEventList() {
        return ((Speaker) user).getTalks();
    }

    public ArrayList<ArrayList<String>> getMySchedule(EventBoard eb) {
        ArrayList<Event> eventList = eb.getAllEventsById(getMyEventList());
        return generateScheduleGenerator().scheduleInfo(eventList);

    }

    /**
     * Return an ArrayList of ArrayList of Strings of information of talks hold by this speaker.
     *
     * @param eb  An EventBoard.
     * @param acm An AccountManager.
     * @return An ArrayList of ArrayList of Strings of event information generated by EventBoard.getInfoList().
     * @see EventBoard
     */
    public ArrayList<ArrayList<String>> getMyEventsInfoList(EventBoard eb, AccountManager acm) {
        ArrayList<ArrayList<String>> result = new ArrayList<>();
        ArrayList<Integer> myEventList = getMyEventList();
        for (int event : myEventList) {
            result.add(eb.getInfoList(event, acm));
        }
        return result;
    }

}
