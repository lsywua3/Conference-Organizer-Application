package event.presenters;

import event.useCases.ScheduleGenerator;

import java.util.*;

/**
 * Presenter for Event System.
 */
public abstract class EventSystemPresenter {
    /**
     * Display the event system menu.
     */
    public abstract void presentMenu();

    /**
     * Display an Input Error Message.
     * "Illegal input!"
     */
    public void presentInputError() {
        System.out.println("Illegal input!");
    }

    /**
     * Display an Illegal Command Message.
     * "Illegal command!"
     */
    public void presentCommandError() {
        System.out.println("Illegal command!");
    }


    /**
     * Display a message for event not found.
     * "Event not found!"
     */
    public void presentEventNotFound(){
        System.out.println("Event not found!");
    }

    /**
     * Display "Currently: ".
     */
    public void presentCurrently(){
        System.out.println("Currently: ");
    }

    /**
     * Display a separation line;
     */
    public void presentLine(){
        System.out.println("--------");
    }

    /**
     * Dsiplay a confirm message.
     */
    public void presentConfirm(){
        System.out.println("[1] Confirm [0] Cancel");
    }

    /**
     * Display a message for showing one event.
     * "Enter event id to get the event info; enter [0] to exit."
     */
    public void presentGetEventInstruction() {
        System.out.println("Enter <event id> to get the event info; enter [0] to exit.");
    }

    /**
     * Display a message for showing all events.
     * "All events in the conference: "
     */
    public void presentGetAllEventsInstruction() {
        System.out.println("All events in the conference: ");
    }

    /**
     * Display a message for showing all schedule.
     * "Schedule of the conference: "
     */
    public void presentGetAllScheduleInstruction() {
        System.out.println("------------\nSchedule of the conference: ");
    }

    /**
     * Display a message for downloading the schedule.
     * "Enter [1] to download the schedule; enter [0] to exit."
     */
    public void presentDownloadScheduleInstruction() { System.out.println("Enter [1] to download the schedule; enter [0] to exit."); }

    /**
     * Display the information of an event.
     *
     * @param eventInfo an ArrayList of String containing the information of the event, in format of
     *                  [id, title, speakers, startTime, duration, capacity, current occupations, speakerName]
     */
    public void presentEvent(List<String> eventInfo) {
        if (eventInfo == null) {
            System.out.println("Your designated event does not exist.");
        } else {
            String result = "";
            String id = eventInfo.get(0);
            String title = eventInfo.get(1);
            String speakers = eventInfo.get(2);
            String startTime = eventInfo.get(3);
            String duration = eventInfo.get(4);
            String capacity = eventInfo.get(5);
            String occupation = eventInfo.get(6);
            String room = eventInfo.get(7);
            String type = eventInfo.get(8);
            String day = eventInfo.get(9);
            String speakerName = eventInfo.get(10);
            if (speakerName.length() >= 3) {
                speakerName = speakerName.substring(0, speakerName.length()-2);
            }
            else {
                speakerName = "you";
            }
            result += "[" + id + "] " + title + " by " + speakerName + " <" + type + "> \n";
            result += "\tDAY" + day + ", TIME: " +startTime + ":00, DUR:" + duration + "hr.\n" +
                      "\tin Room [" + room + "] Cap: (" + occupation + "/" + capacity + ")";
            System.out.println(result);
        }
    }


    /**
     * Display the information of a list of events.
     *
     * @param eventList an ArrayList<ArrayList<String>> of a list of events, each element of the arraylist is an
     *                  arraylist of event information in format of [id, title, speakers, startTime, duration,
     *                  capacity, current occupations, speakerName]
     */
    public void presentEvents(List<List<String>> eventList) {
        for (List<String> eventInfo : eventList) {
            presentEvent(eventInfo);
        }
    }

    /**
     * Display a schedule.
     *
     * @param schedule a schedule generated by ScheduleGenerator.
     * @see ScheduleGenerator
     */
    public void presentSchedule(List<List<String>> schedule) {
        int[] maxLengths = new int[schedule.get(0).size()];
        StringBuilder formatBuilder = new StringBuilder();
        StringBuilder result = new StringBuilder();
        int num = 0;
        ArrayList<Integer> separator = new ArrayList<>();
        StringBuilder lineBuilder = new StringBuilder();
        for (List<String> row : schedule) {
            for (int i = 0; i < row.size(); i++) {
                maxLengths[i] = Math.max(maxLengths[i], row.get(i).length());
            }
        }
        for (int maxLength : maxLengths) {
            formatBuilder.append("%-").append(maxLength + 2).append("s");
            num += maxLength + 2;
            separator.add(num);
        }
        lineBuilder.append("+");
        for (int i = 1; i < num; i++) {
            if (separator.contains(i)) {
                lineBuilder.append("+");
            } else {
                lineBuilder.append("-");
            }
        }
        lineBuilder.append("+");
        result.append(lineBuilder).append("\n");
        String format = formatBuilder.toString();
        for (List<String> row : schedule) {
            for (int i = 0; i < row.size(); i++) {
                row.set(i, "|" + row.get(i));
            }
            result.append(String.format(format, row.toArray())).append("|").append("\n");
            result.append(lineBuilder).append("\n");
        }
        System.out.println(result.toString());
    }


}