package room;

import event.useCases.EventBoard;
import event.useCases.ScheduleGenerator;
import gateways.IGateway;
import interfaces.InfoAccessible;

import java.util.*;

/**
 * Room Manager gives access to room information, used by all types of users for now.
 * Stores information about all the rooms, and a scheduleGenerator used to generate room occupation.
 * <p>
 * Observed by scheduleGenerator, eventBoard, and it's subclass: eventAdmin, for changes to the rooms list.
 */
public class RoomManager extends Observable implements InfoAccessible {
    protected List<Room> rooms;
    protected ScheduleGenerator scheduleGenerator;

    /**
     * Constructs a new RoomManager by taking in an IGateway class, roomGateway, to load the rooms from data file.
     * Also takes in a schedule generator that is given from the eventBoard.
     * This scheduleGenerator is shared by eventBoard and roomManager since both
     * needs the scheduleGenerator.
     *
     * @param g                 RoomGateway
     * @param scheduleGenerator ScheduleGenerator
     */
    public RoomManager(IGateway g, ScheduleGenerator scheduleGenerator) {
        this.rooms = (ArrayList<Room>) g.read();
        this.scheduleGenerator = scheduleGenerator;
    }

    /**
     * Converts all the rooms in the rooms variable into a list of integers of room id.
     *
     * @return all the rooms' id in this conference.
     */
    public List<Integer> getAllRoomId() {
        List<Integer> allRoomId = new ArrayList<>();
        for (Room room : rooms) {
            allRoomId.add(room.getId());
        }
        return allRoomId;
    }

    /**
     * Get all the equipment provided in this conference.
     * This list is generated by looping through all the rooms and get the union of the equipment in all rooms.
     *
     * @return all the possible equipment in this conference's rooms.
     */
    public List<String> getEquip() {
        List<String> equipment = new ArrayList<>();
        for (Room room : rooms) {
            for (String equip : room.getEquipment()) {
                if (!equipment.contains(equip)) {
                    equipment.add(equip);
                }
            }
        }
        return equipment;
    }

    /**
     * Get the room by the given id.
     * Returns null if this room does not exist.
     *
     * @param id id of the room
     * @return the room object that matches the id.
     */
    public Room getRoomById(int id) {
        for (Room room : rooms) {
            if (room.getId() == id) {
                return room;
            }
        }
        return null;
    }

    /**
     * Using the scheduleGenerator, get the occupation information for a given room.
     * The returned list is in the format of:
     * [[starttime, duration, day], [starttime, duration, day]]
     * Where each inner list represents an event that is held in this room.
     * <p>
     * Returns a list containing an empty list
     *
     * @param id id of the room
     * @param eb eventBoard object to get all the events.
     * @return the occupation information of the room.
     */
    public List<List<String>> getOccupation(int id, EventBoard eb) {
        if (!getAllRoomId().contains(id)) {
            List<List<String>> schedule = new ArrayList<>();
            List<String> event = new ArrayList<>();
            schedule.add(event);
            return schedule;
        }
        return scheduleGenerator.occupationInfo(eb.getAllEvents(), id);
    }

    /**
     * This method is used to recommend rooms for a given list of equipment requirements.
     * The method returns all the rooms (id) that contains the given list of equipment.
     * Returns an empty list if non of the rooms meet the given requirement.
     *
     * @param equip required equipment
     * @return the list of rooms (id) that meet this equipment requirement.
     */
    public List<Integer> getRoomByEquip(List<String> equip) {
        List<Integer> rooms = new ArrayList<>();
        for (Room room : this.rooms) {
            if (room.getEquipment().containsAll(equip)) {
                rooms.add(room.getId());
            }
        }
        return rooms;
    }

    @Override
    /**
     * Return one specific information about one specific event.
     * @param id An event's id.
     * @param option One information about this event.
     * @return a specific single information about this event.
     */
    public String getInfo(int id, String option) {
        if (!getAllRoomId().contains(id)) {
            return "The room does not exist";
        }
        Room room = getRoomById(id);
        switch (option) {
            case "id":
                return Integer.toString(room.getId());
            case "name":
                return room.getName();
            case "location":
                return room.getLocation();
            case "equipment":
                return room.getEquipment().toString();
            case "capacity":
                return Integer.toString(room.getCapacity());
        }
        return "Room does not have the entered parameter, if you are looking for occupation, " +
                "please use the other command";
    }

    /**
     * return the complete info of a room.
     * Format: [id, name, location, equipment, capacity]
     *
     * @param id An event's id.
     * @return a List of Info in format of [id, name, location, equipments[], capacity]
     */
    @Override
    public List<String> getInfoList(int id) {
        if (!getAllRoomId().contains(id)) {
            return new ArrayList<>();
        }
        Room room = getRoomById(id);
        if (room == null) {
            return null;
        }
        List<String> info = new ArrayList<>();
        info.add(Integer.toString(room.getId()));
        info.add(room.getName());
        info.add(room.getLocation());
        info.add(room.getEquipment().toString());
        info.add(Integer.toString(room.getCapacity()));
        return info;
    }

    /**
     * This method returns a HashMap that includes the specifications (key) of the room, including
     * id, name, location, equipment, capacity, (value). Occupation (key) of the room, the format is identical to
     * getOccupation method.
     *
     * @param id id of the room
     * @param eb eventBoard used to get all the events.
     * @return the full info for a given room, including specifications and occupation.
     */
    public Map<String, List<List<String>>> getFullInfo(int id, EventBoard eb) {
        Room room = getRoomById(id);
        if (room == null) {
            return null;
        }
        Map<String, List<List<String>>> info = new HashMap<>();
        List<List<String>> specs = new ArrayList<>();
        specs.add(getInfoList(id));
        info.put("specs", specs);
        info.put("occupation", getOccupation(id, eb));
        return info;
    }

    /**
     * Observer method that updates the change in rooms.
     * This method is called after the observers are added in controllers, and when there is a change in rooms list,
     * i.e, addRoom or removeRoom.
     */
    public void updateRooms() {
        setChanged();
        notifyObservers(getAllRoomId());
    }
}
